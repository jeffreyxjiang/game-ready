import numpy as np
import pandas as pd
import random
from datetime import datetime
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
from sklearn.preprocessing import LabelEncoder

#np.random.seed(50)
#random.seed(50)

num_athletes = 5000
days_per_athlete = 30
start_date = pd.to_datetime("2024-01-01")
dates = pd.date_range(start=start_date, periods=days_per_athlete)

data = {
    "athlete_id": [],
    "date": [],
    "daily_calories": [],
    "protein_g": [],
    "carbs_g": [],
    "fat_g": [],
    "sleep_hours": [],
    "daily_steps": [],
    "training_load": [],
    "RPE": [],
    "injury_type": [],
}

possible_injury_types = ["None", "Muscle Strain", "Sprain", "Overuse Injury", "Stress Fracture", "Tendonitis"]

for athlete in range(1, num_athletes + 1):
    for day in dates:
        daily_calories = np.random.randint(2000, 4000)
        protein_g = np.random.randint(80, 200)
        carbs_g = np.random.randint(200, 400)
        fat_g = np.random.randint(50, 120)
        sleep_hours = round(np.random.uniform(5.0, 9.0), 1)
        daily_steps = np.random.randint(2000, 20000)
        training_load = round(np.random.uniform(0, 10), 2)
        RPE = np.random.randint(1, 11)
        base_prob = 0.03
        load_factor = 0.01 * training_load
        rpe_factor = 0.005 * RPE
        sleep_factor = -0.005 * (sleep_hours - 7)
        injury_probability = base_prob + load_factor + rpe_factor + sleep_factor
        injury_probability = max(0, min(injury_probability, 0.5))
        injury_occurred = np.random.rand() < injury_probability
        if injury_occurred:
            injury_type = random.choice(possible_injury_types[1:])
        else:
            injury_type = "None"
        data["athlete_id"].append(athlete)
        data["date"].append(day)
        data["daily_calories"].append(daily_calories)
        data["protein_g"].append(protein_g)
        data["carbs_g"].append(carbs_g)
        data["fat_g"].append(fat_g)
        data["sleep_hours"].append(sleep_hours)
        data["daily_steps"].append(daily_steps)
        data["training_load"].append(training_load)
        data["RPE"].append(RPE)
        data["injury_type"].append(injury_type)

df = pd.DataFrame(data)
print("Dataset shape:", df.shape)
print(df.head(10))

features = ["daily_calories", "protein_g", "carbs_g", "fat_g", "sleep_hours", "daily_steps", "training_load", "RPE"]
target = "injury_type"
X = df[features]
y = df[target]

le = LabelEncoder()
y_encoded = le.fit_transform(y)

X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42)

model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("\nModel Evaluation:")
print("Accuracy:", accuracy)
print("\nClassification Report:")
print(classification_report(y_test, y_pred, target_names=le.classes_))

importances = model.feature_importances_
feature_importance_df = pd.DataFrame({"feature": features, "importance": importances}).sort_values(by="importance", ascending=False)
print("\nFeature Importances:")
print(feature_importance_df)

def predict_injury(user_input: dict) -> dict:
    user_df = pd.DataFrame([user_input])
    probabilities = model.predict_proba(user_df)[0]
    classes = le.inverse_transform(np.arange(len(probabilities)))
    return {cls: prob for cls, prob in zip(classes, probabilities)}

user_input = {
    "daily_calories": 2800,
    "protein_g": 180,
    "carbs_g": 350,
    "fat_g": 80,
    "sleep_hours": 6.5,
    "daily_steps": 15000,
    "training_load": 8.5,
    "RPE": 9
}

predicted_probabilities = predict_injury(user_input)
print("\nPredicted Injury Type Probabilities for the user:")
print(predicted_probabilities)
